/*
 * Copyright (c) 2016, Salesforce.com, Inc.
 * All rights reserved.
 * Licensed under the MIT license.
 * For full license text, see LICENSE.md file in the repo root or
 * https://opensource.org/licenses/MIT
 */

var bananas : 0..100 = 2;
var notePresent: Boolean;
var noteCounter: 0..5 = 5;
type Person : either {
  Happy,
  Hungry,
  GoingToStore,
  ReturningFromStore {
    carrying: 1..8
  },
  Failed
};
var roommates: Array<Person>[1..5];


rule step for state in roommates {
  match state {
    Happy {
      state = Hungry;
      if (notePresent) {
        noteCounter -= 1;
      }
    }

    Hungry {
      if bananas == 0 {
        if (notePresent && noteCounter > 1) {
          
        } else {
          notePresent = True;
          noteCounter = 5;
          state = GoingToStore;
        }
      } else {
        bananas -= 1;
        state = Happy;
      }
    }

    GoingToStore {
      state = ReturningFromStore {
        carrying: urandomRange(1, 8)
      };
    }

    ReturningFromStore(bag) {
      if (urandomRange(0, 2) == 0) {
        state = Failed;
      } else {
        bananas += bag.carrying;
        notePresent = False;
        state = Hungry;
      }
    }
    
    Failed {
      state = Hungry;
    }
  }
}

invariant BananaLimit {
  assert bananas <= 8;
}
